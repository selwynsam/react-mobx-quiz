{"version":3,"sources":["services/api.js","services/quizService.js","stores/index.js","stores/quizStore.js","quiz/components/QuestionContainer.js","quiz/components/QuizOptions.js","quiz/components/DifficultyLevel.js","quiz/components/CountdownTimer.js","quiz/components/QuizResultTable.js","quiz/Quiz.js","quiz/Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","quizService","QuizService","Object","classCallCheck","this","get","url","params","API","store","quizStore","_class","QuizStore","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","shuffleArray","array","i","length","j","Math","floor","random","_ref","createClass","key","value","_this","api","then","res","quizCategories","data","trivia_categories","_this2","category","quizConfigData","categoryId","totalQuestions","category_question_count","total_question_count","_this3","amount","totalQuestionsToAnswer","response_code","quizData","results","loadQuestion","questionInc","questionData","startTimer","alert","inc","answersOptions","concat","toConsumableArray","incorrect_answers","correct_answer","correctAnswer","correctAnswerId","indexOf","question","difficulty","selectedId","score","name","categoryName","timeInMilliseconds","set","toFixed","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","computed","QuestionContainer","prop","react_default","a","createElement","Row","Col","md","span","offset","className","ReactHtmlParser","QuizOptions","quizOptions","options","map","opt","optionClass","onClick","clickEvent","bind","DifficultyLevel","CountdownTimer","nextProps","nextState","index_es","date","Date","now","props","duration","zeroPadTime","autoStart","onComplete","pause","Component","QuizResultTable","tableComponent","colName","col","Table","responsive","Quiz","inject","observer","state","selectedAnswerId","isAnswerSelected","showNextQuestionBtn","timerDuration","gameInProgress","loadNextQuestion","gameProgress","setState","clearState","selectAnswer","checkAnswer","getOptionsCLass","optionId","onTimerEnd","e","getQuizQuestions","_this$props$quizStore","Container","components_DifficultyLevel","components_CountdownTimer","components_QuestionContainer","components_QuizOptions","Button","variant","components_QuizResultTable","Home","possibleConstructorReturn","getPrototypeOf","call","inputChangeHandler","target","id","selectedIndex","getAttribute","getCategoryQuestionCount","totalTime","assertThisInitialized","reset","getQuizCategories","Form","Group","controlId","Label","Control","type","placeholder","onChange","required","as","val","data-categoryname","min","max","Text","readOnly","history","push","App","mobx_react_module","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d04ac856.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://opentdb.com/'\r\n});","import API from './api';\r\n\r\nexport class QuizService {\r\n\r\n    get = (url,params)=> {\r\n        return API.get(url,{ params: params});\r\n    }\r\n}\r\n\r\nexport default new QuizService();","import quizStore from './quizStore';\r\n\r\nconst store = {\r\n    quizStore\r\n}\r\n\r\nexport default store;","import { observable, action, computed } from 'mobx';\r\nimport api from '../services/quizService';\r\n\r\nexport class QuizStore {\r\n    @observable\r\n    quizData = [];\r\n\r\n    @observable quizCategories = [];\r\n    @observable quizConfigData = {\r\n        name: 'User',\r\n        categoryId: null,\r\n        categoryName: 'Any',\r\n        totalQuestions: 30,\r\n        totalQuestionsToAnswer: 30,\r\n        timeInMilliseconds: 150000\r\n    }\r\n\r\n    @observable questionData = {\r\n        question:null,\r\n        correctAnswerId: null,\r\n        difficulty: null,\r\n        answersOptions: [],\r\n        correctAnswer: null,\r\n        score: 0,\r\n        startTimer: false\r\n    };\r\n\r\n    @observable questionInc = 0;\r\n\r\n    @action\r\n    getQuizCategories(){\r\n        api.get('api_category.php').then(res =>{\r\n            this.quizCategories = res.data.trivia_categories;\r\n        });\r\n    }\r\n\r\n    @action \r\n    getCategoryQuestionCount(){\r\n        api.get('api_count.php',{ 'category': this.quizConfigData.categoryId }).then(res =>{\r\n            this.quizConfigData.totalQuestions = res.data.category_question_count.total_question_count;\r\n        });\r\n    }\r\n\r\n    @action\r\n    getQuizQuestions(){\r\n        let data = {\r\n            amount: this.quizConfigData.totalQuestionsToAnswer,\r\n            category: this.quizConfigData.categoryId,\r\n        };\r\n        api.get('api.php',data).then(res =>{\r\n            if(res.data.response_code === 0){\r\n                this.quizData = res.data.results;\r\n                this.loadQuestion(this.questionInc);\r\n                this.questionData.startTimer = true;\r\n            }else{\r\n                switch(res.data.response_code){\r\n                    case 1:\r\n                        alert('No Results Could not return results.');\r\n                        break;\r\n\r\n                    case 2:\r\n                        alert(`Invalid Parameter Contains an invalid parameter. Arguements passed in aren't valid`);\r\n                        break;\r\n\r\n                    default: \r\n                        alert('Failed to fetch questions');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @action\r\n    loadQuestion(){\r\n        const inc =  this.questionInc;\r\n        \r\n        if( inc <= this.quizData.length - 1 ){\r\n            const questionData = this.questionData;\r\n            let answersOptions = [...this.quizData[inc].incorrect_answers,this.quizData[inc].correct_answer];\r\n                \r\n            questionData.answersOptions = this.shuffleArray(answersOptions);\r\n            questionData.correctAnswer = this.quizData[inc].correct_answer;\r\n            questionData.correctAnswerId = questionData.answersOptions.indexOf(questionData.correctAnswer);\r\n            questionData.question = this.quizData[inc].question;\r\n            questionData.difficulty = this.quizData[inc].difficulty;\r\n\r\n            this.questionInc++;\r\n\r\n            return true;\r\n        }\r\n\r\n        this.questionData.startTimer = false;\r\n        return false;\r\n    }\r\n\r\n    shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    }\r\n\r\n    @action\r\n    checkAnswer(selectedId){\r\n        const questionData = this.questionData\r\n        if(selectedId === questionData.correctAnswerId){\r\n            questionData.score = questionData.score + 1;\r\n        }\r\n    }\r\n\r\n    @action\r\n    reset(){\r\n        this.quizData = [];\r\n\r\n        this.quizCategories = [];\r\n        this.quizConfigData = {\r\n            name: 'User',\r\n            categoryId: null,\r\n            categoryName: 'Any',\r\n            totalQuestions: 30,\r\n            totalQuestionsToAnswer: 30,\r\n            timeInMilliseconds: 150000\r\n        }\r\n\r\n        this.questionData = {\r\n            question:null,\r\n            correctAnswerId: null,\r\n            difficulty: null,\r\n            answersOptions: [],\r\n            correctAnswer: null,\r\n            score: 0,\r\n            startTimer: false\r\n        };\r\n\r\n        this.questionInc = 0;\r\n    }\r\n\r\n    set totalTime(totalQuestions){\r\n        this.quizConfigData.timeInMilliseconds = totalQuestions*5000;\r\n    }\r\n\r\n    @computed\r\n    get totalTime(){\r\n        let timeInMiunutes = this.quizConfigData.timeInMilliseconds / 60000;\r\n        return timeInMiunutes.toFixed(1);\r\n    }\r\n}\r\n\r\nexport default new QuizStore();","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nconst QuestionContainer = (prop) => {\r\n    return(\r\n        <Row>\r\n            <Col md={{span:6, offset:3}} className=\"p-0\">\r\n                <div className=\"question-container\">{ ReactHtmlParser(prop.question) }</div>\r\n                <div className=\"wave\"></div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default QuestionContainer;\r\n\r\n","import React from 'react';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nconst QuizOptions = (prop) => {\r\n    \r\n    const quizOptions = prop.options.map((opt,i) =>{\r\n        return[\r\n            <li key = {i} className = {prop.optionClass(i)}  onClick={prop.clickEvent.bind(this,i)}>{ReactHtmlParser(opt)}</li>\r\n        ];\r\n    });\r\n\r\n    return(\r\n        <ul className=\"answers-container\">\r\n            { quizOptions }\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default QuizOptions;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nconst DifficultyLevel = (prop) =>{\r\n    return(\r\n        <Row>\r\n            <Col md={{span:6, offset:3}} className=\"p-0 game-level-info\">\r\n                &lt;{ prop.difficulty } <b>Game</b>&gt;\r\n            </Col>\r\n        </Row>\r\n    );\r\n    \r\n}\r\n\r\nexport default DifficultyLevel;","import React, { Component } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Countdown from 'react-countdown-now';\r\n\r\n// const CountdownTimer = (prop) => {\r\nclass CountdownTimer extends Component{\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Row>\r\n                <Col md={{span:6, offset:3}} className=\"p-0 timer-section\">\r\n                    <b>Time Remaining: </b><Countdown date={Date.now() + this.props.duration } zeroPadTime={2} autoStart= \r\n                    {this.props.startTimer} onComplete = {this.props.onComplete} pause={true}/>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountdownTimer;","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst QuizResultTable = (props) =>{\r\n    const tableData = [\r\n        { colName: 'Name', value: props.quizConfigData.name },\r\n        { colName: 'Quiz Categoryme', value: props.quizConfigData.categoryName },\r\n        { colName: 'Correct Answers', value: props.score },\r\n        { colName: 'Total Questions', value: props.quizConfigData.totalQuestionsToAnswer }\r\n    ];\r\n    \r\n    const tableComponent = tableData.map((col,i)=>{\r\n        return(\r\n            <tr key={i}>\r\n                <td>{col.colName}</td>\r\n                <td>{col.value}</td>\r\n            </tr>\r\n        );\r\n    });\r\n    return(\r\n        <Table responsive>\r\n            <tbody>\r\n                {tableComponent}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default QuizResultTable;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport './Quiz.css';\r\n\r\nimport QuestionContainer from './components/QuestionContainer';\r\nimport QuizOptions from './components/QuizOptions';\r\nimport DifficultyLevel from './components/DifficultyLevel';\r\nimport CountdownTimer from './components/CountdownTimer';\r\nimport QuizResultTable from './components/QuizResultTable';\r\n\r\n\r\n@inject('quizStore')\r\n\r\n@observer\r\nclass Quiz extends Component {\r\n    state = {\r\n        selectedAnswerId: null,\r\n        isAnswerSelected: false,\r\n        showNextQuestionBtn: false,\r\n        timerDuration: 0,\r\n        startTimer: false,\r\n        gameInProgress : true\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.props.quizStore.getQuizQuestions();\r\n    }\r\n\r\n    loadNextQuestion = () => {\r\n        const gameProgress = this.props.quizStore.loadQuestion();\r\n        this.setState({gameInProgress: gameProgress});\r\n        this.clearState();\r\n    }\r\n\r\n    selectAnswer = (selectedId) => { \r\n        if(!this.state.isAnswerSelected){\r\n            this.setState({\r\n                isAnswerSelected:true,\r\n                selectedAnswerId: selectedId,\r\n                showNextQuestionBtn: true\r\n            });\r\n\r\n            this.props.quizStore.checkAnswer(selectedId);\r\n        }\r\n    }\r\n\r\n    getOptionsCLass = (optionId) => {\r\n        if(this.state.isAnswerSelected){\r\n            if(optionId === this.props.quizStore.questionData.correctAnswerId){\r\n                return 'correctOptionClass';\r\n            }\r\n\r\n            if(optionId === this.state.selectedAnswerId){\r\n                return 'wrongOptionClass';\r\n            }\r\n        }\r\n    }\r\n\r\n    clearState = () =>{\r\n        this.setState({\r\n            selectedAnswerId: null,\r\n            isAnswerSelected: false,\r\n            showNextQuestionBtn: false,\r\n            timerDuration: 0,\r\n            startTimer: false\r\n        })\r\n    }\r\n\r\n    onTimerEnd = (e) => {\r\n        this.setState({gameInProgress: false});\r\n        this.clearState();\r\n    }\r\n\r\n    render(){\r\n        const {questionData, quizConfigData } = this.props.quizStore;\r\n        return(\r\n            <Container>\r\n                { this.state.gameInProgress ? (\r\n                    <div>\r\n                        <DifficultyLevel difficulty = { questionData.difficulty } />\r\n                        {\r\n                            questionData.startTimer && (\r\n                                <CountdownTimer duration = {quizConfigData.timeInMilliseconds} onComplete = {this.onTimerEnd}/>\r\n                            )\r\n                        }\r\n                        <QuestionContainer question = { questionData.question } />\r\n                        <Row>\r\n                            <Col md={{span:6, offset:3}} className=\"p-0\">\r\n                                <QuizOptions options = { questionData.answersOptions } clickEvent = {this.selectAnswer} optionClass = {this.getOptionsCLass} />\r\n                                { this.state.showNextQuestionBtn ? <Button variant=\"primary\" className=\"next-question\" onClick = {this.loadNextQuestion}>NEXT QUESTION</Button> : null }\r\n                                <div className=\"score\">SCORE: { questionData.score }</div>\r\n                            </Col>  \r\n                        </Row>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <Row>\r\n                            <Col md={{span:6, offset:3}} className=\"score-card\">\r\n                                <Row className=\"score-card-header\">Quiz Result</Row>\r\n                                <Row>\r\n                                   <QuizResultTable quizConfigData = {quizConfigData} score={ questionData.score }/>\r\n                                </Row>\r\n                            </Col>  \r\n                        </Row>    \r\n                    </div>  \r\n                )}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nexport default Quiz;","import React, { Component } from 'react';\r\nimport { observer,inject} from 'mobx-react';\r\nimport { Container, Form, Row, Col, Button } from 'react-bootstrap';\r\n\r\n@inject('quizStore')\r\n@observer\r\nclass Home extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.inputChangeHandler.bind(this);\r\n        if(this.props.quizStore.quizData.length > 0){\r\n            this.props.quizStore.reset();\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.quizStore.getQuizCategories();\r\n    }\r\n\r\n    inputChangeHandler = e =>{\r\n        const { quizConfigData } = this.props.quizStore;\r\n        quizConfigData[e.target.id] = e.target.value;\r\n\r\n        if(e.target.id === 'categoryId' && e.target.value > 0){\r\n            quizConfigData.categoryName = e.target[e.target.selectedIndex].getAttribute('data-categoryname');\r\n            this.props.quizStore.getCategoryQuestionCount();\r\n        }\r\n\r\n        if(e.target.id === 'totalQuestionsToAnswer' && e.target.value > 0){\r\n            this.props.quizStore.totalTime = quizConfigData.totalQuestionsToAnswer;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { quizConfigData, quizCategories } = this.props.quizStore;\r\n        return(\r\n            <Container>\r\n                <Row>\r\n                    <Col md={{span:6, offset:3}} className=\"p-0\">\r\n                        <Form id=\"quizForm\">\r\n                            <Form.Group controlId=\"name\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter your name\" onChange={ this.inputChangeHandler } required={true} />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"categoryId\">\r\n                                <Form.Label>Select Category</Form.Label>\r\n                                <Form.Control as=\"select\" onChange={ this.inputChangeHandler }>\r\n                                <option key={0} value = {0} >Any</option>\r\n                                    { quizCategories.map((val,i)=>{\r\n                                        return(<option key={i+1} data-categoryname={val.name} value = {val.id}>{val.name}</option>);\r\n                                    })}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"totalQuestionsToAnswer\">\r\n                                <Form.Label>Total Questions</Form.Label>\r\n                                <Form.Control type=\"number\" min = {10}  max={ quizConfigData.totalQuestions } value = { quizConfigData.totalQuestionsToAnswer } placeholder=\"Total Questions\" onChange={ this.inputChangeHandler } />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    You can reduce the number of questions you want to answer ( max = { quizConfigData.totalQuestions } ).\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"totalTime\">\r\n                                <Form.Label>Total Time</Form.Label>\r\n                                <Form.Control type=\"text\" value = { `${this.props.quizStore.totalTime} minutes` } placeholder=\"Total Time\" readOnly={ true } />\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"button\" onClick = { e =>{ this.props.history.push('/quiz'); }}>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport store from './stores';\nimport Quiz from './quiz/Quiz';\nimport Home from './quiz/Home';\n\nfunction App() {\n  return (\n    <Provider {...store} >\n      <HashRouter>\n        <Route exact= {true} path= \"/\" component= {Home} />\n        <Route exact= {true} path= \"/quiz\" component= {Quiz} />\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}